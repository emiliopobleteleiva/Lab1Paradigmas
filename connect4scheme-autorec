#lang scheme

;constructores

;player
(define player(lambda(id name color wins losses draws remaining-pieces)
               (list id name color wins losses draws remaining-pieces)
  ))
;piezas
(define piece(lambda(color)
               (list color)
               )
  )
;board

(define (board)
  (make-list 7 (make-list 6 'empty))
  );lista de 7 listas con 6 elementos cada una // apoyo: gpt codepilot

;modificar board

(define (empty-board board)
                     (define (empty-column column) ;modificar una lista dada, de forma que todos sus elementos serán cambiados por 0
                                           (map (lambda (x) 0) column))
                     (map empty-column board)) ;ejecutar (map funcion board), de esta manera se ejecuta "empty-column" en cada columna del tablero
;//apoyo: gpt codepilot

;board / otros

;board board-can-play?

(define board-can-play?(lambda(board) ;return bool #t o #f
                         (cond ((null? board) #f) ;comprobar si la lista actual es nula
                               ((member 0 (car board)) #t);comprobar que 0 exista dentro de la sublista, funcion member implementada con apoyo de gpt codepilot
                               (else (board-can-play? (cdr board))) ;caso else, se realiza una recursión eliminando la primera sublista
                               )
                         )
  )
;testing
(define p1 (player 1 "juan" "rojo" 0 0 0 21))
(define color-rojo (piece "rojo"))
(display p1)
(newline)
(display color-rojo)
(newline)

(define board1 (empty-board (board)))
(display board1)
(board-can-play? board1)